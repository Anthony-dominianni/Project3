#!/usr/bin/env python3

import sys
import socket
import datetime
import json

MSG_SIZE = 1500
TIMEOUT = 2
# Map of received packets, used to handle duplicates and reorder packets
PACKETS = {}


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")
    sys.stderr.flush()


def send_ack(decoded, sock, addr):
    """
    Function to send ack back to sender
    :param decoded: packet received
    :param sock: socket
    :param addr: address
    :return:
    """
    # Ignoring duplicates
    if decoded['sequence'] not in PACKETS:
        PACKETS[decoded['sequence']] = decoded['data']
    msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data']), "len": len(decoded['data'])})
    log("ABOUT TO SEND " + msg)
    if sock.sendto(msg.encode('ascii'), addr) < len(msg):
        log("[error] unable to fully send packet")


def receive(packet, ack, sock, addr):
    """
    Main receive packet logic. Writes to stout and sends acks
    :param packet: data packet received
    :param ack: expected ack
    :param sock: socket
    :param addr: destination address
    :return:
    """
    if packet['data']:
        # Packet received is in expected order
        if packet['sequence'] == ack:
            log(f"[recv data] {packet['sequence']} ({len(packet['data'])}) ACCEPTED (in-order)")
            sys.stdout.write(packet['data'])
            # send a few acks for high drop rate
            for x in range(0, 3):
                send_ack(packet, sock, addr)
            ack += len(packet['data'])
            # Print out all packets in order
            while ack in PACKETS:
                sys.stdout.write(PACKETS[ack])
                ack += len(PACKETS[ack])
        else:
            log(f"[recv out of order] {packet['sequence']} ({len(packet['data'])}) "
                f"expected {ack}")
            send_ack(packet, sock, addr)


def main():
    """
    Main execution loop of program
    :return:
    """
    # Bind to localhost and an ephemeral port
    udp_ip = "127.0.0.1"
    udp_port = 0

    # Set up the socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((udp_ip, udp_port))
    sock.settimeout(TIMEOUT)

    # Get port we bound to
    udp_port = sock.getsockname()[1]
    log(f"[bound] {udp_port}")

    expected_ack = 0

    # Now listen for packets
    while True:

        try:
            result = sock.recvfrom(MSG_SIZE)

            # If nothing is ready, we hit the timeout
            if result:
                (data, addr) = result
                data = data.decode('ascii')

                try:
                    decoded = json.loads(data)

                    # If the EOF flag is set, exit
                    if decoded['eof']:
                        log("[completed]")
                        sys.exit(0)

                    # If there is data, we accept it and print it out
                    receive(decoded, expected_ack, sock, addr)

                except (ValueError, KeyError, TypeError) as exc:
                    log("[recv corrupt packet]")
                    raise exc
        except socket.timeout:
            log("[error] timeout")

if __name__ == '__main__':
    main()