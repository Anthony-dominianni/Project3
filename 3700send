#!/usr/bin/env python3

import sys
import socket
import datetime
import json
import time

MSG_SIZE = 1500
DATA_SIZE = 1472
TIMEOUT = 2
SEQN = 0
SEQUENCE_TO_MESSAGE = {}


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")
    sys.stderr.flush()


def send(packet, sock, dest):
    if sock.sendto(json.dumps(packet).encode('ascii'), dest) < len(packet):
        log("[error] unable to fully send packet")
    else:
        log("[send data] " + str(packet['sequence']) + " (" + str(len(packet["data"])) + ")")


def send_next_packet(seqn, sock, dest):
    msg = {"sequence": seqn, "data": "", "ack": False, "eof": False}
    overhead = len(json.dumps(msg))
    msg["data"] = sys.stdin.read(DATA_SIZE - overhead)

    # Map sequence number to message and store
    SEQUENCE_TO_MESSAGE[seqn] = msg

    if len(msg["data"]) > 0:
        assert (len(msg) <= DATA_SIZE), f"ERROR: Datagram is longer ({len(msg)}) than {DATA_SIZE} bytes!!!"
        send(msg, sock, dest)
        return seqn + len(msg["data"])
    return seqn


def retransmit_packets(sock, dest):
    """
    Retransmit packets for which no ACK was received
    :param sock: socket to send over
    :param dest: destination address of socket
    :return:
    """
    for seq in SEQUENCE_TO_MESSAGE.keys():
        log("[retransmit packet] " + str(seq))
        send(SEQUENCE_TO_MESSAGE[seq], sock, dest)


def main():
    # Bind to localhost and an ephemeral port
    ip_port = sys.argv[1]
    udp_ip = ip_port[0:ip_port.find(":")]
    udp_port = int(ip_port[ip_port.find(":") + 1:])
    dest = (udp_ip, udp_port)

    # Set up the socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.settimeout(TIMEOUT)

    # Send first packet
    SEQN = send_next_packet(0, sock, dest)

    # Now read in data, send packets
    while True:
        log("ABOUT TO SLEEP")

        try:
            result = sock.recvfrom(MSG_SIZE)
            if result:
                (data, _addr) = result
                data = data.decode('ascii')

                try:
                    decoded = json.loads(data)

                    earliest_sequence_not_acked = min(SEQUENCE_TO_MESSAGE.keys())

                    # If there is an ack, send next packet
                    if decoded['ack'] == earliest_sequence_not_acked + len(
                            SEQUENCE_TO_MESSAGE[earliest_sequence_not_acked]["data"]):

                        log(f"[recv ack] {SEQN}")

                        del SEQUENCE_TO_MESSAGE[min(SEQUENCE_TO_MESSAGE.keys())]

                        # Try to send next packet; break if no more data
                        new_seq = send_next_packet(SEQN, sock, dest)
                        if new_seq == SEQN:
                            break
                        SEQN = new_seq
                except (ValueError, KeyError, TypeError) as e:
                    log(f"[recv corrupt packet] {str(e)}")

            log(f"(seqn {SEQN})")

        except socket.timeout:
            log(f"[error] did not receive ack for {SEQN}")
            # earliest_sequence_not_acked = min(SEQUENCE_TO_MESSAGE)
            #
            # msg = json.dumps({"sequence": earliest_sequence_not_acked,
            #                   "data": SEQUENCE_TO_MESSAGE[earliest_sequence_not_acked],
            #                   "eof": False})
            #
            # sock.sendto(msg.encode('ascii'), dest)
            retransmit_packets(sock, dest)

    for x in range(1, 5):
        log(f"sending eof")
        sock.sendto(json.dumps({"eof": True}).encode('ascii'), dest)
    sys.exit(0)


if __name__ == '__main__':
    main()
