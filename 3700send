#!/usr/bin/env python3

import sys
import socket
from datetime import datetime
import json

MSG_SIZE = 1500
DATA_SIZE = 1472
TIMEOUT = 0.5
SEQN = 0
SEQUENCE_TO_MESSAGE = {}
CWND = 1
SSTHRESH = 32
ALPHA = 0.875
RTT = None

def log(string):
    sys.stderr.write(datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")
    sys.stderr.flush()


def send_packet(msg, sock, dest):
    if sock.sendto(json.dumps(msg).encode('ascii'), dest) < len(msg):
        log("[error] unable to fully send packet")
    else:
        log("[send data] " + str(msg["sequence"]) + " (" + str(len(msg["data"])) + ")")


def resend_dropped_packets(sock, dest):
    for seq in SEQUENCE_TO_MESSAGE.keys():
        SEQUENCE_TO_MESSAGE[seq]["dispatch"] = datetime.now().__str__()
        msg = {"sequence": seq,
               "data": SEQUENCE_TO_MESSAGE[seq]["data"],
               "eof": False}
        send_packet(msg, sock, dest)


def send_next_packet(seqn, sock, dest):
    global SEQN
    global SEQUENCE_TO_MESSAGE

    msg = {"sequence": seqn, "data": "", "eof": False}
    overhead = len(json.dumps(msg))
    msg["data"] = sys.stdin.read(DATA_SIZE - overhead)

    if len(msg["data"]) > 0:
        # Map sequence number to message and store
        SEQUENCE_TO_MESSAGE[seqn] = {**msg, "dispatch": datetime.now().__str__()}

        assert (len(msg) <= DATA_SIZE), f"ERROR: Datagram is longer ({len(msg)}) than {DATA_SIZE} bytes!!!"
        send_packet(msg, sock, dest)
        return seqn + len(msg["data"])
    return seqn


def receive_ack(ack_data, recvtime, sock):
    global RTT
    global TIMEOUT
    ack_seqn = ack_data['ack'] - ack_data['len']
    if ack_seqn in SEQUENCE_TO_MESSAGE:
        seq = SEQUENCE_TO_MESSAGE[ack_seqn]
        dispatch = datetime.strptime(seq['dispatch'],
                                     "%Y-%m-%d %H:%M:%S.%f")
        diff = round((recvtime - dispatch).total_seconds(), 4)
        RTT = ALPHA * RTT + (1 - ALPHA) * diff if RTT else diff
        TIMEOUT = 2 * RTT
        sock.settimeout(TIMEOUT)
        log(f"timeout updated to {str(TIMEOUT)}")
        log(f"[recv ack] {str(ack_data)}")
        log(f"removing {ack_seqn} from map")
        del SEQUENCE_TO_MESSAGE[ack_seqn]


def send_and_wait_for_acks(sock, dest):
    global SEQN
    global SEQUENCE_TO_MESSAGE
    global CWND
    global TIMEOUT
    while True:
        try:
            result = sock.recvfrom(MSG_SIZE)
            if result:
                recvtime = datetime.now()
                (data, _addr) = result
                data = data.decode('ascii')
                try:
                    decoded = json.loads(data)
                    # If there is an ack, update table and RTO
                    receive_ack(decoded, recvtime, sock)
                    # if dictionary is empty, send next wave of packets
                    if not SEQUENCE_TO_MESSAGE:
                        log("all acks received, CWND " + str(CWND))
                        if CWND < SSTHRESH:
                            CWND *= 2
                        elif CWND == SSTHRESH:
                            CWND += 1
                        log("CWND now " + str(CWND))
                        for x in range(0, CWND):
                            # Try to send next packet; break if no more data
                            new_seq = send_next_packet(SEQN, sock, dest)
                            if SEQN == new_seq and not SEQUENCE_TO_MESSAGE:
                                log("Done, exiting.")
                                return
                            SEQN = new_seq
                except (ValueError, KeyError, TypeError) as e:
                    log(f"[recv corrupt packet] {e.__str__()}")
        except socket.timeout:
            CWND = CWND // 2 if CWND > 1 else 1
            missing = []
            for seq in sorted(SEQUENCE_TO_MESSAGE.keys()):
                missing.append(seq)
            log(f"[error] did not receive ack for {str(missing)}")
            log(f"map: {str(SEQUENCE_TO_MESSAGE)}")
            resend_dropped_packets(sock, dest)


def main():
    # Bind to localhost and an ephemeral port
    global SEQN
    ip_port = sys.argv[1]
    udp_ip = ip_port[0:ip_port.find(":")]
    udp_port = int(ip_port[ip_port.find(":") + 1:])
    dest = (udp_ip, udp_port)

    # Set up the socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.settimeout(TIMEOUT)

    # Send first packet
    new_seqn = send_next_packet(SEQN, sock, dest)
    SEQN = new_seqn
    # Now read in data, send packets
    send_and_wait_for_acks(sock, dest)

    for i in range(0, 10):
        sock.sendto(json.dumps({"eof": True}).encode('ascii'), dest)

    log('[completed]')
    sys.exit(0)


if __name__ == '__main__':
    main()
